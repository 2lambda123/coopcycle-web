winzou_state_machine:
    sylius_order:
        class: "%sylius.model.order.class%"
        property_path: state
        graph: sylius_order
        state_machine_class: "%sylius.state_machine.class%"
        states:
            cart: ~
            new: ~
            cancelled: ~
            fulfilled: ~
            accepted: ~
            refused: ~
        transitions:
            create:
                from: [cart]
                to: new
            cancel:
                from: [new, accepted]
                to: cancelled
            fulfill:
                from: [new, accepted]
                to: fulfilled
            accept:
                from: [new]
                to: accepted
            refuse:
                from: [new]
                to: refused
            ready:
                from: [accepted]
                to: ready
            confirm:
                from: [cart]
                to: new
        callbacks:
            before:
                before_create_assign_number:
                    on: "create"
                    do: ["@sylius.order_number_assigner", "assignNumber"]
                    args: ["object"]
                before_confirm_assign_number:
                    on: "confirm"
                    do: ["@sylius.order_number_assigner", "assignNumber"]
                    args: ["object"]
            after:
                after_create_authorize_payment:
                    on: "create"
                    do: ["@coopcycle.order_manager", "authorizePayment"]
                    args: ["object"]
                after_accept_create_delivery:
                    on: "accept"
                    do: ["@coopcycle.order_manager", "createDelivery"]
                    args: ["object"]
                after_accept_publish_redis_event:
                    on: "accept"
                    do: ["@coopcycle.order_manager", "publishRedisEvent"]
                    args: ["object", "'order.accept'"]
                after_accept_send_email:
                    on: "accept"
                    do: ["@coopcycle.notification_manager", "notifyOrderAccepted"]
                    args: ["object"]
                after_refuse_send_email:
                    on: "refuse"
                    do: ["@coopcycle.notification_manager", "notifyOrderCanceled"]
                    args: ["object"]
                after_cancel_send_email:
                    on: "cancel"
                    do: ["@coopcycle.notification_manager", "notifyOrderCanceled"]
                    args: ["object"]
                after_confirm_send_email:
                    on: "confirm"
                    do: ["@coopcycle.notification_manager", "notifyDeliveryConfirmed"]
                    args: ["object", "object.getCustomer().getEmail()"]
    sylius_payment:
        class: AppBundle\Entity\StripePayment
        property_path: state
        graph: sylius_payment
        state_machine_class: "%sylius.state_machine.class%"
        states:
            cart: ~
            new: ~
            authorized: ~
            processing: ~
            completed: ~
            failed: ~
            cancelled: ~
            void: ~
            refunded: ~
        transitions:
            create:
                from: [cart]
                to: new
            authorize:
                from: [new]
                to: authorized
            process:
                from: [new]
                to: processing
            complete:
                from: [new, authorized, processing]
                to: completed
            fail:
                from: [new, authorized, processing]
                to: failed
            cancel:
                from: [new, processing]
                to: cancelled
            refund:
                from: [completed]
                to: refunded
            void:
                from: [new, processing]
                to: void
        callbacks:
            after:
                after_authorize_send_email:
                    on: "authorize"
                    do: ["@coopcycle.notification_manager", "notifyOrderCreated"]
                    args: ["object.getOrder()"]
                after_authorize_publish_redis_event:
                    on: "authorize"
                    do: ["@coopcycle.order_manager", "publishRedisEvent"]
                    args: ["object.getOrder()", "'order.payment_authorized'"]
