<?php

namespace AppBundle\Validator;

use AppBundle\Entity\Base\GeoCoordinates;
use AppBundle\Entity\Address;
use AppBundle\Entity\Contract;
use AppBundle\Entity\Restaurant;
use AppBundle\Entity\Sylius\Order;
use AppBundle\Service\RoutingInterface;
use AppBundle\Utils\ValidationUtils;
use AppBundle\Validator\Constraints\Order as OrderConstraint;
use AppBundle\Validator\Constraints\OrderValidator;
use Carbon\Carbon;
use Prophecy\Argument;
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;
use Symfony\Component\Validator\Test\ConstraintValidatorTestCase;

class OrderValidatorTest extends ConstraintValidatorTestCase
{
    protected $routing;

    public function setUp()
    {
        $this->routing = $this->prophesize(RoutingInterface::class);
        Carbon::setTestNow(Carbon::create(2017, 9, 2, 11, 0));

        parent::setUp();
    }

    protected function tearDown()
    {
        Carbon::setTestNow();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function createValidator()
    {
        return new OrderValidator($this->routing->reveal(), new ExpressionLanguage());
    }

    private function prophesizeGetRawResponse(GeoCoordinates $origin, GeoCoordinates $destination, $distance, $duration)
    {
        $this->routing
            ->getRawResponse($origin, $destination)
            ->willReturn([
                'routes' => [
                    [
                        'distance' => $distance,
                        'duration' => $duration
                    ]
                ]
            ]);
    }

    private function createAddressProphecy(GeoCoordinates $coords)
    {
        $address = $this->prophesize(Address::class);

        $address
            ->getGeo()
            ->willReturn($coords);

        return $address;
    }

    private function createRestaurantProphecy(
        Address $address,
        Address $shippingAddress,
        $minimumCartAmount,
        $maxDistanceExpression,
        $canDeliver)
    {
        $restaurant = $this->prophesize(Restaurant::class);

        $restaurant
            ->getAddress()
            ->willReturn($address);

        $restaurant
            ->getMinimumCartAmount()
            ->willReturn($minimumCartAmount);

        $restaurant
            ->getDeliveryPerimeterExpression()
            ->willReturn($maxDistanceExpression);

        $restaurant
            ->canDeliverAddress(Argument::any(), Argument::any(), Argument::any())
            ->willReturn($canDeliver);

        return $restaurant;
    }

    private function createOrderProphecy(Restaurant $restaurant, Address $shippingAddress)
    {
        $order = $this->prophesize(Order::class);

        $order
            ->getId()
            ->willReturn(null);

        $order
            ->getRestaurant()
            ->willReturn($restaurant);

        $order
            ->getShippingAddress()
            ->willReturn($shippingAddress);

        return $order;
    }

    public function testDistanceValidation()
    {
        $now = Carbon::now();

        $shippedAt = clone $now;
        $shippedAt->modify('+1 day');

        $shippingAddressCoords = new GeoCoordinates();
        $restaurantAddressCoords = new GeoCoordinates();

        $shippingAddress = $this->createAddressProphecy($shippingAddressCoords);
        $restaurantAddress = $this->createAddressProphecy($restaurantAddressCoords);

        $restaurant = $this->createRestaurantProphecy(
            $restaurantAddress->reveal(),
            $shippingAddress->reveal(),
            $minimumCartAmount = 20,
            $maxDistanceExpression = 'distance < 3000',
            $canDeliver = false
        );
        $restaurant
            ->isOpen($shippedAt)
            ->willReturn(true);

        $order = $this->createOrderProphecy(
            $restaurant->reveal(),
            $shippingAddress->reveal()
        );
        $order
            ->getShippedAt()
            ->willReturn($shippedAt);
        $order
            ->getItemsTotal()
            ->willReturn(2500);

        $this->prophesizeGetRawResponse(
            $restaurantAddressCoords,
            $shippingAddressCoords,
            $distance = 3500,
            $duration = 300
        );

        $constraint = new OrderConstraint();
        $violations = $this->validator->validate($order->reveal(), $constraint);

        $this->buildViolation($constraint->addressTooFarMessage)
            ->atPath('property.path.shippingAddress')
            ->assertRaised();
    }

    public function testDateValidation()
    {
        $this->markTestSkipped();

        $contract = new Contract();
        $contract->setMinimumCartAmount(0);
        $contract->setFlatDeliveryPrice(1000);

        $restaurant = new Restaurant();
        $restaurant->setMaxDistanceExpression('distance < 3000');
        $restaurant->addOpeningHour('Mo-Sa 11:30-14:30');
        $restaurant->setContract($contract);

        $delivery = new Delivery();

        $order = new Order();
        $order->setDelivery($delivery);
        $order->setRestaurant($restaurant);

        // It takes 15 minutes to deliver
        $delivery->setDuration(15 * 60);
        $delivery->setDistance(1500);

        Carbon::setTestNow(Carbon::create(2017, 9, 2, 11, 30));

        // Restaurant is open
        $delivery->setDate(new \DateTime('2017-09-02 12:40:00'));

        $violations = $this->validator->validate($order);
        $this->assertEquals(0, count($violations));

        // Restaurant is closed
        $delivery->setDate(new \DateTime('2017-09-03 12:40:00'));

        $violations = $this->validator->validate($order);
        $errors = ValidationUtils::serializeValidationErrors($violations);
        $this->assertArrayHasKey('delivery.date', $errors);

        // Delivery is too soon
        $delivery->setDate(new \DateTime('2017-09-02 11:20:00'));

        $violations = $this->validator->validate($order);
        $errors = ValidationUtils::serializeValidationErrors($violations);
        $this->assertArrayHasKey('delivery.date', $errors);

        // Date has passed
        Carbon::setTestNow(Carbon::create(2017, 9, 2, 12, 30));
        $delivery->setDate(new \DateTime('2017-09-02 12:40:00'));

        $violations = $this->validator->validate($order);
        $errors = ValidationUtils::serializeValidationErrors($violations);
        $this->assertArrayHasKey('delivery.date', $errors);
    }

    public function testMinimumAmountValidation()
    {
        $now = Carbon::now();

        $shippedAt = clone $now;
        $shippedAt->modify('+1 day');

        $shippingAddressCoords = new GeoCoordinates();
        $restaurantAddressCoords = new GeoCoordinates();

        $shippingAddress = $this->createAddressProphecy($shippingAddressCoords);
        $restaurantAddress = $this->createAddressProphecy($restaurantAddressCoords);

        $restaurant = $this->createRestaurantProphecy(
            $restaurantAddress->reveal(),
            $shippingAddress->reveal(),
            $minimumCartAmount = 2000,
            $maxDistanceExpression = 'distance < 3000',
            $canDeliver = true
        );
        $restaurant
            ->isOpen($shippedAt)
            ->willReturn(true);

        $order = $this->createOrderProphecy(
            $restaurant->reveal(),
            $shippingAddress->reveal()
        );
        $order
            ->getShippedAt()
            ->willReturn($shippedAt);
        $order
            ->getItemsTotal()
            ->willReturn(500);

        $this->prophesizeGetRawResponse(
            $restaurantAddressCoords,
            $shippingAddressCoords,
            $maxDistanceExpression = 'distance < 1500',
            $duration = 300
        );

        $constraint = new OrderConstraint();
        $violations = $this->validator->validate($order->reveal(), $constraint);

        $this->buildViolation($constraint->totalIncludingTaxTooLowMessage)
            ->atPath('property.path.total')
            ->setParameter('%minimum_amount%', 20.00)
            ->assertRaised();
    }
}
